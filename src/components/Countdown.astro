---
// Countdown.astro
export interface Props {
  targetDate: string;
  title?: string | null;
  footer?: string;
  className?: string;
  style?: "stylized" | "minimal";
  size?: "normal" | "compact";
  units?: "full" | "hours" | "minutes";
}

const {
  targetDate,
  title = "Cuenta Regresiva",
  footer = "",
  className = "",
  style = "stylized",
  size = "normal",
  units = "full",
} = Astro.props;

// Configuraciones de estilo
const styleClasses = {
  stylized: {
    container:
      "bg-gradient-to-br from-indigo-500 to-purple-600 rounded-3xl shadow-2xl text-white",
    title:
      "bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent drop-shadow-lg",
    timeValue:
      "bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl",
    label: "text-white/90",
    separator: "text-white/70",
  },
  minimal: {
    container: "",
    title: "text-gray-800",
    timeValue: "bg-white border border-gray-300 rounded-md shadow-sm",
    label: "text-gray-900",
    separator: "text-gray-400",
  },
};

// Configuraciones de tamaño
const sizeClasses = {
  normal: {
    container: "gap-8 p-8 max-w-2xl",
    title: "text-4xl md:text-2xl font-bold",
    display: "gap-4",
    timeValue: "text-3xl md:text-5xl font-extrabold py-4 px-6 min-w-20",
    label: "text-sm font-semibold uppercase tracking-wider",
    separator: "text-4xl md:text-5xl font-bold",
  },
  compact: {
    container: "gap-3 p-4 max-w-lg",
    title: "text-lg font-semibold",
    display: "gap-2",
    timeValue: "text-lg font-bold py-2 px-3 min-w-12",
    label: "text-xs font-thin uppercase tracking-wide",
    separator: "text-xl font-bold",
  },
};

const currentStyle = styleClasses[style];
const currentSize = sizeClasses[size];

// Determinar qué unidades mostrar
const showDays = units === "full";
const showHours = units === "full" || units === "hours";
const showMinutes =
  units === "full" || units === "hours" || units === "minutes";
const showSeconds = true; // Siempre mostrar segundos
---

<div
  class={`flex flex-col items-center font-sans mx-auto w-full ${currentStyle.container} ${currentSize.container} ${className}`}
>
  {
    title && (
      <h2 class={`m-0 text-center ${currentStyle.title} ${currentSize.title}`}>
        {title}
      </h2>
    )
  }

  <div
    class={`countdown-display flex items-center flex-wrap justify-center ${currentSize.display}`}
    data-target={targetDate}
    data-units={units}
  >
    {
      showDays && (
        <>
          <div class="flex flex-col items-center gap-2">
            <span
              class={`time-value days text-center ${currentStyle.timeValue} ${currentSize.timeValue}`}
            >
              00
            </span>
            <span class={`${currentStyle.label} ${currentSize.label}`}>
              Días
            </span>
          </div>

          {(showHours || showMinutes) && (
            <div
              class={`time-separator opacity-70 ${currentStyle.separator} ${currentSize.separator} ${style === "stylized" ? "animate-pulse" : ""}`}
            >
              :
            </div>
          )}
        </>
      )
    }

    {
      showHours && (
        <>
          <div class="flex flex-col items-center gap-2">
            <span
              class={`time-value hours text-center ${currentStyle.timeValue} ${currentSize.timeValue}`}
            >
              00
            </span>
            <span class={`${currentStyle.label} ${currentSize.label}`}>
              Horas
            </span>
          </div>

          {showMinutes && (
            <div
              class={`time-separator opacity-70 ${currentStyle.separator} ${currentSize.separator} ${style === "stylized" ? "animate-pulse" : ""}`}
            >
              :
            </div>
          )}
        </>
      )
    }

    {
      showMinutes && (
        <>
          <div class="flex flex-col items-center gap-2">
            <span
              class={`time-value minutes text-center ${currentStyle.timeValue} ${currentSize.timeValue}`}
            >
              00
            </span>
            <span class={`${currentStyle.label} ${currentSize.label}`}>
              Minutos
            </span>
          </div>

          <div
            class={`time-separator opacity-70 ${currentStyle.separator} ${currentSize.separator} ${style === "stylized" ? "animate-pulse" : ""}`}
          >
            :
          </div>
        </>
      )
    }

    <div class="flex flex-col items-center gap-2">
      <span
        class={`time-value seconds text-center ${currentStyle.timeValue} ${currentSize.timeValue}`}
      >
        00
      </span>
      <span class={`${currentStyle.label} ${currentSize.label}`}>
        Segundos
      </span>
    </div>
  </div>

  {
    footer && (
      <h2 class={`m-0 text-center ${currentStyle.title} ${currentSize.title}`}>
        {footer}
      </h2>
    )
  }

  <div
    class={`countdown-message hidden text-center font-bold animate-pulse ${
      style === "stylized"
        ? "text-2xl md:text-3xl bg-gradient-to-r from-red-400 to-yellow-400 bg-clip-text text-transparent"
        : "text-xl text-red-600"
    }`}
  >
    <span>¡Tiempo terminado!</span>
  </div>
</div>

<style>
  /* Animaciones personalizadas para el estilo estilizado */
  .time-separator {
    animation: blink 2s infinite;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 0.7;
    }
    51%,
    100% {
      opacity: 0.2;
    }
  }

  /* Responsive: layout compacto en móviles */
  @media (max-width: 480px) {
    .countdown-display {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .time-separator {
      display: none;
    }
  }

  /* Para el tamaño compacto, hacer layout horizontal incluso en móviles */
  .countdown-display[data-units="minutes"] {
    flex-direction: row;
  }
</style>

<script>
  function initCountdown() {
    const countdownElements = document.querySelectorAll(".countdown-display");

    countdownElements.forEach((element: any) => {
      const targetDate = new Date(element.dataset.target).getTime();
      const units = element.dataset.units || "full";

      function updateCountdown() {
        const now = new Date().getTime();
        const distance = targetDate - now;

        if (distance < 0) {
          element.style.display = "none";
          const message =
            element.parentElement.querySelector(".countdown-message");
          if (message) {
            message.classList.remove("hidden");
            message.classList.add("block");
          }
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor(
          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        );
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Actualizar solo los elementos que existen según la configuración
        const daysEl = element.querySelector(".days");
        const hoursEl = element.querySelector(".hours");
        const minutesEl = element.querySelector(".minutes");
        const secondsEl = element.querySelector(".seconds");

        if (daysEl) daysEl.textContent = days.toString().padStart(2, "0");

        if (hoursEl) {
          // Si no mostramos días, agregar las horas de los días a las horas
          const totalHours = units !== "full" ? hours + days * 24 : hours;
          hoursEl.textContent = totalHours.toString().padStart(2, "0");
        }

        if (minutesEl) {
          // Si solo mostramos minutos, agregar todo el tiempo restante en minutos
          if (units === "minutes") {
            const totalMinutes = Math.floor(distance / (1000 * 60));
            minutesEl.textContent = totalMinutes.toString().padStart(2, "0");
          } else {
            minutesEl.textContent = minutes.toString().padStart(2, "0");
          }
        }

        if (secondsEl) {
          secondsEl.textContent = seconds.toString().padStart(2, "0");
        }
      }

      updateCountdown();
      setInterval(updateCountdown, 1000);
    });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCountdown);
  } else {
    initCountdown();
  }

  // Reinicializar en navegación del lado del cliente (para SPAs)
  document.addEventListener("astro:page-load", initCountdown);
</script>
