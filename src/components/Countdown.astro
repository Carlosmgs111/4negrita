---
// Countdown.astro
export interface Props {
  targetDate: string;
  title?: string;
  footer?: string;
  className?: string;
}

const {
  targetDate,
  title = "Cuenta Regresiva",
  footer = "",
  className = "",
} = Astro.props;
---

<div
  class={`flex flex-col items-center gap-8 p-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-3xl shadow-2xl text-white font-sans max-w-2xl mx-auto w-full ${className}`}
>
  <h2
    class="text-4xl md:text-2xl font-bold m-0 text-center bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent drop-shadow-lg"
  >
    {title}
  </h2>

  <div
    class="countdown-display flex items-center gap-4 flex-wrap justify-center"
    data-target={targetDate}
  >
    <div class="flex flex-col items-center gap-2 min-w-20">
      <span
        class="time-value days text-3xl md:text-5xl font-extrabold bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl py-4 px-6 min-w-20 text-center shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
      >
        00
      </span>
      <span class="text-sm font-semibold uppercase tracking-wider opacity-90"
        >Días</span
      >
    </div>

    <div
      class="time-separator text-4xl md:text-5xl font-bold opacity-70 animate-pulse"
    >
      :
    </div>

    <div class="flex flex-col items-center gap-2 min-w-20">
      <span
        class="time-value hours text-3xl md:text-5xl font-extrabold bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl py-4 px-6 min-w-20 text-center shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
      >
        00
      </span>
      <span class="text-sm font-semibold uppercase tracking-wider opacity-90"
        >Horas</span
      >
    </div>

    <div
      class="time-separator text-4xl md:text-5xl font-bold opacity-70 animate-pulse"
    >
      :
    </div>

    <div class="flex flex-col items-center gap-2 min-w-20">
      <span
        class="time-value minutes text-3xl md:text-5xl font-extrabold bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl py-4 px-6 min-w-20 text-center shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
      >
        00
      </span>
      <span class="text-sm font-semibold uppercase tracking-wider opacity-90"
        >Minutos</span
      >
    </div>

    <div
      class="time-separator text-4xl md:text-5xl font-bold opacity-70 animate-pulse"
    >
      :
    </div>

    <div class="flex flex-col items-center gap-2 min-w-20">
      <span
        class="time-value seconds text-3xl md:text-5xl font-extrabold bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl py-4 px-6 min-w-20 text-center shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
      >
        00
      </span>
      <span class="text-sm font-semibold uppercase tracking-wider opacity-90"
        >Segundos</span
      >
    </div>
  </div>

  {footer && (
    <h2
      class="text-4xl md:text-2xl font-bold m-0 text-center bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent drop-shadow-lg"
    >
      {footer}
    </h2>
  )}

  <div
    class="countdown-message hidden text-2xl md:text-3xl font-bold text-center bg-gradient-to-r from-red-400 to-yellow-400 bg-clip-text text-transparent animate-pulse"
  >
    <span>¡Tiempo terminado!</span>
  </div>
</div>

<style>
  /* Animaciones personalizadas que no están disponibles en Tailwind por defecto */
  .time-separator {
    animation: blink 2s infinite;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 0.7;
    }
    51%,
    100% {
      opacity: 0.2;
    }
  }

  /* Responsive: ocultar separadores en móviles muy pequeños */
  @media (max-width: 480px) {
    .countdown-display {
      flex-direction: column;
      gap: 1rem;
    }

    .time-separator {
      display: none;
    }
  }
</style>

<script>
  function initCountdown() {
    const countdownElements = document.querySelectorAll(".countdown-display");

    countdownElements.forEach((element: any) => {
      const targetDate = new Date(element.dataset.target).getTime();

      function updateCountdown() {
        const now = new Date().getTime();
        const distance = targetDate - now;

        if (distance < 0) {
          element.style.display = "none";
          const message =
            element.parentElement.querySelector(".countdown-message");
          if (message) {
            message.classList.remove("hidden");
            message.classList.add("block");
          }
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor(
          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        );
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        const daysEl = element.querySelector(".days");
        const hoursEl = element.querySelector(".hours");
        const minutesEl = element.querySelector(".minutes");
        const secondsEl = element.querySelector(".seconds");

        if (daysEl) daysEl.textContent = days.toString().padStart(2, "0");
        if (hoursEl) hoursEl.textContent = hours.toString().padStart(2, "0");
        if (minutesEl)
          minutesEl.textContent = minutes.toString().padStart(2, "0");
        if (secondsEl)
          secondsEl.textContent = seconds.toString().padStart(2, "0");
      }

      updateCountdown();
      setInterval(updateCountdown, 1000);
    });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCountdown);
  } else {
    initCountdown();
  }

  // Reinicializar en navegación del lado del cliente (para SPAs)
  document.addEventListener("astro:page-load", initCountdown);
</script>
