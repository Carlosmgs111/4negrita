---
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Home/Hero.astro";
import StorySection from "../components/Home/StorySection.astro";
import RaffleDetails from "../components/Home/RaffleDetails.astro";
import ProgressSection from "../components/Home/ProgressSection.astro";
import FAQSection from "../components/Home/FAQSection.astro";
import CallToAction from "../components/Home/CallToAction.astro";
import { supabase } from "@/lib/supabase";
import { stateManager } from "@/stores/stores";

const prodDrawId = "5156d678-bc45-45d1-aa30-847a57330626";
const devDrawId = "7ea8c51c-f3ff-4c05-b15e-8d1975473bfc";
const drawId =
  import.meta.env.PUBLIC_ENV === "development" ? devDrawId : prodDrawId;
const playedLotteryDate = import.meta.env.PUBLIC_LOTTERY_PLAY_DATE;

let totalSoldTickets;
let totalRaised;
let daysLeftToPlay;
let { playDate, limitDate, ticketPrice, totalTickets, tickets } =
  stateManager.getState();

if (!playDate || !limitDate || !ticketPrice || !totalTickets) {
  // Ejecutar todas las consultas en paralelo
  const [lotteryData, drawData, ticketsData] = await Promise.all([
    fetch(`https://api-resultadosloterias.com/api/results/${playedLotteryDate}`)
      .then((res) => res.json())
      .then((data) =>
        data.data?.find(({ lottery }: any) => lottery === "BOYACA")
      ),
    supabase
      .from("draw")
      .select("raffleId, limitDate, playDate, raffle(*)")
      .eq("id", drawId)
      .single(),
    supabase.from("ticket").select("*"),
  ]);
  const { result, series } = lotteryData || {};
  console.log({ result, series });
  const { data: draw } = drawData;
  const raffle = draw?.raffle;
  const { data: _tickets } = ticketsData;
  tickets = _tickets;
  totalSoldTickets = tickets?.length;
  console.log({ totalSoldTickets });
  totalTickets = raffle?.totalTickets;
  totalRaised = raffle?.ticketPrice * totalSoldTickets;
  playDate = draw?.playDate;
  limitDate = draw?.limitDate;
  ticketPrice = raffle?.ticketPrice;
  daysLeftToPlay = Math.floor(
    (new Date(limitDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)
  );
  stateManager.setState({
    totalTickets,
    playDate,
    limitDate,
    ticketPrice,
    tickets,
  });
}

totalSoldTickets = tickets?.length;
totalRaised = ticketPrice * totalSoldTickets;
daysLeftToPlay = Math.floor(
  (new Date(limitDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)
);
---

<Layout title="Home | 4Negrita">
  <main>
    <Hero
      totalSoldTickets={totalSoldTickets}
      ticketPrice={ticketPrice}
      totalTickets={totalTickets}
      totalRaised={totalRaised}
      daysLeftToPlay={daysLeftToPlay}
    />
    <StorySection />
    <RaffleDetails
      playDate={playDate}
      limitDate={limitDate}
      ticketPrice={ticketPrice}
    />
    <ProgressSection
      totalRaised={totalRaised}
      ticketPrice={ticketPrice}
      totalTickets={totalTickets}
      daysLeftToPlay={daysLeftToPlay}
    />
    <FAQSection />
    <CallToAction />
  </main>
</Layout>
